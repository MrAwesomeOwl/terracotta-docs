{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Terracotta","text":"<p>DiamondFire is a Minecraft server where you can make your own minigames using block code.</p> <p>I do not like block code.</p> <p>Terracotta is a text-based programming language that compiles to DiamondFire templates with the goal of actually making plot development easier. Unlike previous text-to-df languages, Terracotta makes no compromises when it comes to functionality or convenience. Everything you can do with DiamondFire blocks is just as easy or easier in Terracotta.</p> <p>To get started, visit Installation Guide and Plot Setup</p>"},{"location":"#why-terracotta-is-awesome","title":"Why Terracotta is awesome","text":"<ul> <li> <p>Expressions. Almost anywhere you can put a value in Terracotta, you can write an expression. You never have to think about %math again!</p> </li> <li> <p>Automatic codeline splitting. Codelines that are too long for your plot will be automatically split into  multiple functions.</p> </li> <li> <p>Human-compatable syntax. Terracotta looks and feels like an actual programming language, not like bytecode.</p> </li> <li> <p>Intellisense/autocomplete support. Remembering specific names of actions sucks, so you can get autocomplete to do it for you. Also supports completion of variable names, function names, action tags, potion effect ids, etc.</p> </li> <li> <p>Compiled code templates are placed automatically. Going from Terracotta code to a playable plot is as easy as pressing <code>f5</code>. (thanks CodeClient!)</p> </li> <li> <p>Only code templates that actually changed will be re-placed, making Terracotta usable for large plots.</p> </li> </ul> <p>And of course, being a text based programming language, you get all sorts of nice things you don't get through normal DiamondFire like comments, copy+paste, easily readable code, etc.</p>"},{"location":"dingus/","title":"Dignus","text":""},{"location":"dingus/#oh-great-heavens","title":"oh great heavens","text":""},{"location":"test/","title":"Test","text":""},{"location":"test/#dingus","title":"dingus","text":"<p>yes</p>"},{"location":"test/#dongus","title":"dongus","text":"<p>YERS</p>"},{"location":"codeblocks/action/","title":"Action","text":""},{"location":"codeblocks/action/#syntax","title":"Syntax","text":"<p>Action syntax is as follows: <pre><code>target:Action(arguments){tags};\n</code></pre></p>"},{"location":"codeblocks/action/#arguments","title":"Arguments","text":"<p>Arguments are values seperated by commas. Arguments with no value are converted to empty slots. <pre><code>default:SendMessage(\"Hello\",\"world!\");\ndefault:SendMessage(  ,\"Slot 2 string\",  ,  ,\"Slot 5 string\");\n</code></pre></p>"},{"location":"codeblocks/action/#tags","title":"Tags","text":"<p>Tag syntax can be thought of as a dictionary: <pre><code>default:SendMessage(\"Tags!\"){\"Alignment Mode\" = \"Centered\", \"Inherit Styles\" = \"True\"};\n</code></pre> To use a variable as the tag value, a default must be provided immediately after: <pre><code>default:SendMessage(\"Tags!\"){\"Alignment Mode\" = global messageMode ? \"Centered\"};\n</code></pre> If you are using the vscode extension, you can use the autocomplete shortcut (<code>ctrl+space</code> by default) to quickly insert tag names and values.</p> <p>Arguments and tags are both optional and can be left out, making all of these valid action calls: <pre><code>default:StopSounds(snd[\"Pling\"]);\ndefault:StopSounds{\"Sound Source\" = \"Jukebox/Note Blocks\"};\ndefault:StopSounds;\n</code></pre></p>"},{"location":"codeblocks/action/#player-actions","title":"Player Actions","text":"<p>Player actions use the following targets:</p> <ul> <li><code>default</code></li> <li><code>killer</code></li> <li><code>damager</code></li> <li><code>shooter</code></li> <li><code>victim</code></li> <li><code>allPlayers</code></li> <li><code>selection</code></li> </ul> Examples<pre><code>default:GivePotionEffect(pot[\"Saturation\"]){\"Effect Particles\" = \"None\", \"Overwrite Effect\" = \"False\"};\n\ndefault:SetVisualShoulderParrot{\"Shoulder\" = \"Left\", \"Type\" = \"Cyan\"};\n\nallPlayers:SendMessage(s\"&lt;green&gt;%default&lt;white&gt;has joined!\");\n\nselection:SetToCreativeMode;\n\nvictim:Heal(game.EventDamage/2);\n\nshooter:GiveItems(item[\"Arrow\"]);\n</code></pre>"},{"location":"codeblocks/action/#entity-actions","title":"Entity Actions","text":"<p>Entity actions use the following targets:</p> <ul> <li><code>selectionEntity</code></li> <li><code>defaultEntity</code></li> <li><code>killerEntity</code></li> <li><code>damagerEntity</code></li> <li><code>shooterEntity</code></li> <li><code>victimEntity</code></li> <li><code>allEntities</code></li> <li><code>allMobs</code></li> <li><code>projectile</code></li> <li><code>lastEntity</code></li> </ul> Examples<pre><code>defaultEntity:Teleport(default.Location + vec[0,10,0]);\n\ndefaultEntity:EatGrass;\n\nselectionEntity:Damage(5);\n\nprojectile:SetArrowNoClip{\"Has NoClip\" = \"Enable\"};\n\nallMobs:FaceLocation(default.Location)\n\nlastEntity:SetTag(\"owner\",\"%default\");\n</code></pre>"},{"location":"codeblocks/action/#game-actions","title":"Game Actions","text":"<p>Game actions use the <code>game</code> target. </p> Examples<pre><code>game:SpawnMob(item[\"zombie_spawn_egg\"],game.EventBlockLocation);\n\ngame:CancelEvent;\n\ngame:SummonLightning(victim.Location);\n\ngame:SetBlock(loc[10,50,10],item[\"beacon\"]);\n</code></pre>"},{"location":"codeblocks/set_var/","title":"Set Variable","text":"<p>Math operations can be done much easier by using Expressions. You should only do math via setvar actions when you want absolute control over the template's codeblocks, otherwise its easier to let the compiler handle it for you.</p>"},{"location":"codeitems/string_and_styled_text/","title":"String & Styled Text","text":""},{"location":"codeitems/string_and_styled_text/#syntax","title":"Syntax","text":"<p>Strings can use either single or double quotes and compile directly to DiamondFire String items.</p> <pre><code>default:SendMessage(\"double quote string\", 'single quote string');\n</code></pre> <p>Prefixing any string with <code>s</code> will turn it into a Styled Text. <pre><code>default:SendMessage(s\"&lt;rainbow&gt;&lt;b&gt;Hello world!\");\n</code></pre></p>"},{"location":"codeitems/string_and_styled_text/#color-codes-ampersand-conversion","title":"Color Codes (Ampersand Conversion)","text":"<p>When ampersands (<code>&amp;</code>) are immediately proceeded by a character that makes a valid formatting code, they are automatically converted to section symbols (<code>\u00a7</code>) to make that formatting code functional. To prevent ampersands from being converted at all, they can be escaped (see Escape Sequences).</p> <pre><code># this message will show up green:\ndefault:SendMessage(\"&amp;acolored text\"); # colored text\n\n# this message will show up white:\ndefault:SendMessage(\"\\&amp;aun-colored text\"); # &amp;aun-colored text\n\n# this ampersand doesn't need to be escaped at all:\ndefault:SendMessage(\"good &amp; evil\"); # good &amp; evil\n</code></pre> <p>Ampersand conversion does NOT occur in Styled Text. <pre><code># this &amp; will not get converted even though &amp;a is a color code:\ndefault:SendMessage(s\"&amp;aawesome message\"); # &amp;aawesome message\n</code></pre></p>"},{"location":"codeitems/string_and_styled_text/#escape-sequences","title":"Escape Sequences","text":"<p>Quotes, ampersands, and backslashes themselves can all be escaped by immediately proceeding them with a backslash.</p> <pre><code>default:SendMessage('jeff\\'s',\"\\\"amazing\\\"\",\"creation\"); #jeff's \"amazing\" creation\ndefault:SendMessage(\"/ iron\\&amp;diamonds \\\\\"); #/ iron&amp;diamonds \\\n</code></pre> <p>Newlines can be inserted using \\n <pre><code>default:SendMessage(\"%default's stats:\\nCoins: %var(%default coins)\\nLevel: %var(%default level)\");\n</code></pre></p>"},{"location":"codeitems/string_and_styled_text/#unicode-characters","title":"Unicode Characters","text":"<p>Unicode characters be inserted using the <code>\\u</code> escape code. This is especially useful when working with custom UI elements.</p> <p>Warning</p> <p>Unicode escape sequences are evaluated at compile time. Due to this, the following is invalid: This will NOT compile!<pre><code>line characterCode = \"2620\";\n\ndefault:SendMessage(\"\\u%var(characterCode)\");\n</code></pre></p>"},{"location":"codeitems/string_and_styled_text/#four-digits","title":"Four Digits","text":"<p>Four digit unicode characters can be inserted using <code>\\uXXXX</code>, where each X is a hexadecimal digit. <pre><code>default:SendMessage(\"\\u2620 You died!\") # \u2620 You died!\n</code></pre></p>"},{"location":"codeitems/string_and_styled_text/#more-or-less-digits","title":"More or Less Digits","text":"<p>Unicode characters with more or less than 4 digits can be inserted using <code>\\u{}</code>, with any number of hexadecimal digits inside the braces.</p> <pre><code>default:SendMessage(\"\\u{1F525}\"); # \ud83d\udd25\ndefault:SendMessage(\"\\u{44}\\u{46}\"); # DF\n</code></pre>"},{"location":"codeitems/variable/","title":"Variable","text":""},{"location":"codeitems/variable/#syntax","title":"Syntax","text":"<p>Variables are accessed by a scope keyword followed by a name. <pre><code>global gameVariable\nsaved savedVariable\nlocal localVariable\nline lineVariable\n</code></pre></p> <p>In DiamondFire, variables do not need to be declared, so they don't need to be declared in Terracotta either. Think of variables in Terracotta as one-to-one representations of variable code items.</p> <p>This means that whenever a variable is being referenced, you must provide its scope. This holds true even if a variable of that name has been referenced with a given scope already.</p> <pre><code>local message = \"Hello world!\";\n\n# specifying the scope here is REQUIRED!\ndefault:SendMessage(local message);\n\n# any scope can be used\ndefault:SendMessage(local message, global message);\n</code></pre>"},{"location":"codeitems/variable/#string-names","title":"String Names","text":"<p>To use text codes or special characters in variable names, wrap the variable name in a string and wrap the string in square brackets.</p> <pre><code>global [\"%var(team) playerCount\"] = game.SelectionSize;\nsaved [\"%uuid gamesPlayed\"] += 1;\n</code></pre> <p>This string value does not accept expressions! It must be a single string literal.</p>"},{"location":"codeitems/variable/#types","title":"Types","text":"<p>Variable types only matter when using variables in Expressions. For any other uses like inserting them into arguments, types do not matter. As of now, there is no strict typing mode.</p> <p>Terracotta has a level of type inference built in. Types can be inferred in the following scenarios:</p> Type inference scenarios (click to expand) <ol> <li> <p>Setting a variable to a value <pre><code># type is inferred as vector for future uses of the variable\nglobal var = vec[1,2,3];\n</code></pre></p> </li> <li> <p>Setting a variable to the result of a function <pre><code># type is inferred as string for future uses of the variable\nglobal blockData = var:GetAllBlockData(default.TargetBlockLocation);\n</code></pre></p> </li> <li> <p>Any action that has a return type controlled by tags <pre><code># type is inferred as item for future uses of the variable\nglobal itemType = item:GetMaterial(default.MainHandItem){\"Return Value Type\" = \"Item\"};\n</code></pre> <pre><code># type is inferred as string for future uses of the variable\nglobal itemType = item:GetMaterial(default.MainHandItem){\"Return Value Type\" = \"Item Name (Golden Apple)\"};\n</code></pre></p> </li> <li> <p>SetToRandom if all arguments are the same type <pre><code># type is inferred as string for future uses of the variable\nglobal teleportLoc = var:SetToRandom(loc[10,50,10], loc[52,27,88], global spawnLoc: loc);\n</code></pre> <pre><code># type remains unknown\nglobal teleportLoc = var:SetToRandom(50,\"fifty\");\n</code></pre></p> </li> <li> <p>Inside if var?IsType <pre><code>if (var?IsType(saved [\"%uuid trail\"]){\"Variable Type\" = \"Particle\"}) {\n    # type is inferred as particle inside this if block\n}\n# outside the if block, type remains unknown\n</code></pre></p> </li> <li> <p>Accessing parameter values <pre><code>FUNCTION DisplayEffect;\nPARAM effect: par;\n# type is inferred as particle for future uses of the line variable 'effect'\n</code></pre></p> </li> </ol> <p>In many cases, like accessing globals created in other scripts, that's not enough. So, anywhere a variable is referenced, it can specify its expected type by putting <code>: &lt;type&gt;</code> after the variable name.</p> <pre><code>line definitelyAString: str\n</code></pre> <p>When specified in an expression, the type hint is local to that one use of the variable.</p> <pre><code>FUNCTION GoToSpawn;\n\ndefault:Teleport(global spawnLocation: loc + vec[0,1,0]);\nwait(20);\n\n# this will fail to compile because the compiler doesn't know the type of spawnLocation\ndefault:Teleport(global spawnLocation + vec[0,10,0]);\n</code></pre> <p>Types can be given to variables on their own and will persist for the rest of the file unless overridden.</p> <pre><code>FUNCTION GoToSpawn;\n\n# spawnLocation will have type 'loc' for the rest of the script\nglobal spawnLocation: loc;\n\ndefault:Teleport(global spawnLocation + vec[0,1,0]);\nwait(20);\ndefault:Teleport(global spawnLocation + vec[0,10,0]);\n</code></pre>"},{"location":"getting_started/plot_setup/","title":"Plot Setup","text":"<p>If you haven't already installed the VSCode extension and CodeUtils, see Installation</p> <p>Don't delete your code!</p> <p>Always make sure to start with an empty plot. Never run Terracotta on plots made using normal DiamondFire coding because there is no way to recover code Terracotta may overwrite.</p>"},{"location":"getting_started/plot_setup/#creating-a-project","title":"Creating a Project","text":"<p>First, create a project folder to hold all your plot's code and open it in VSCode. Then from the Run and Debug menu, click <code>create a launch.json file</code> and select <code>Terracotta</code> from the list of langauges. In the newly created <code>launch.json</code> file, make sure to set <code>plotSize</code> appropriately for the plot you will be compiling to.</p> Plot Type Plot Size Basic <code>50</code> Large <code>100</code> Massive <code>300</code> Mega <code>300</code> All <code>launch.json</code> parameter explanations <ul> <li><code>folder</code>: The folder to compile. Pretty self-explanatory.</li> <li><code>exportMode</code>: Can be either <code>\"sendToCodeClient\"</code> or <code>\"saveToFiles\"</code><ul> <li><code>\"sendToCodeClient\"</code>: When running, automatically place compiled templates via CodeClient</li> <li><code>\"saveToFiles\"</code>: (CURRENTLY UNIMPLEMENTED!) When running, save all compiled templates to files</li> </ul> </li> <li><code>autoSwitchToDev</code>: If in play or build mode upon compiling, automatically enter dev mode. If left disabled, trying to compile while in build or play mode will fail. Only applies if <code>exportMode</code> is <code>\"sendToCodeClient\"</code>.</li> <li><code>autoSwitchToPlay</code>: Automatically enter play mode after all compiled templates have been placed.</li> <li><code>plotSize</code>: Used by the codeline splitter to know what length templates should be limited to. If you want to \"disable\" the codeline splitter, just set this to a very high number.</li> </ul>"},{"location":"getting_started/plot_setup/#compiling-a-project","title":"Compiling a Project","text":"<p>Terracotta script files have the extension <code>.tc</code>. Create a script in your project folder to test with:</p> test.tc<pre><code>PLAYER_EVENT Join;\n\ndefault:SendMessage(\"Hello world!\");\n</code></pre> <p>In your Minecraft client, run the command <code>/auth</code>. This gives Terracotta permission to manipulate your plot using CodeClient. You will need to do this every time you restart either Minecraft or VSCode, but not every time you compile.</p> <p>Once all that's complete, press f5 or click the green play symbol at the top of Run and Debug to compile your plot.</p> <p>Warning</p> <p>Sometimes CodeClient will give up while trying to place code. If this happens, run <code>/abort</code> in your Minecraft client and try recompiling.</p> <p>If you find yourself getting stuck in a plot border, run <code>/worldplot &lt;your plot size&gt;</code>.</p>"},{"location":"getting_started/syntax_guide/","title":"Syntax Guide","text":"<p>TODO</p> <p>semicolons</p> <p>non whitespace signifigant</p>"},{"location":"language_features/expressions/","title":"Expressions","text":"<p>For uses of the Set Variable block not covered by the operators listed below, see Set Variable</p> <p>You can write an expression almost anywhere you can put a value.</p> Examples<pre><code>line reward = num:Round(game.PlayerCount * global coinBonus * (global [\"%default killstreak\"] + 10));\n\ndefault:Teleport(default.Location + (default.Direction * global [\"%default teleportRange\"]));\n\ndefault:GivePotionEffect(pot[\"Speed\", 1, (10*20) + num:Random(0,global maxPotionBonus)]);\n</code></pre>"},{"location":"language_features/expressions/#value-operators","title":"Value Operators","text":"<p>Info</p> <p>Many operators work on more types of code items than just numbers. For more info on which operators work with which code items, check out the code items' respecitve pages under the Code Items category.</p> <p>Terracotta supports the following operators:</p> <ul> <li><code>+</code> - Addition</li> <li><code>-</code> - Subtraction</li> <li><code>*</code> - Multiplication</li> <li><code>/</code> - Division</li> <li><code>^</code> - Exponentiation</li> <li><code>%</code> - Modulo</li> </ul> <p>Operations between constants are evaluated at compile-time, meaning you can use them safely for convenience without having to worry about using CPU. In the below example, <code>5 * 20</code> is directly added to the template as the number <code>100</code> and never creates any codeblocks. This applies to all code items, not just numbers.</p> <pre><code>wait(5 * 20){\"Time Unit\" = \"Ticks\"};\n</code></pre>"},{"location":"language_features/expressions/#inlined-functions","title":"Inlined Functions","text":"<p>Any function that returns a value can be used in expressions. Some actions like Set Location Coordinate still return a value even if their description doesn't say so. Generally, if an action has <code>Variable - Variable to set</code> as its first parameter, it can be inlined.</p> <p>Custom functions cannot be inlined yet as they cannot specify return types, however this functionality will be added in a future update.</p> Examples<pre><code>default:SendMessage(\"You rolled a \" + num:Random(1,6) + \"!\");\n\ndefault:GiveItems(item[var:SetToRandom(\"cooked_porkchop\",\"cooked_beef\",\"golden_carrot\"),16]);\n</code></pre>"},{"location":"language_features/expressions/#incrementors","title":"Incrementors","text":"<p>Incrementors do an operation to a variable without having to write out <code>variablename = variablename &lt;operation&gt; &lt;value&gt;</code>.</p> Incremetors<pre><code>global added      += 10;\nglobal subtracted -= 2389;\nglobal multiplied *= 100;\nglobal divided    /= 10;\nglobal exponented ^= 3;\nglobal moduloed   %= 2;\n</code></pre>"},{"location":"language_features/expressions/#type-overrides","title":"Type Overrides","text":"<p>Terracotta has some type inference built in, so for many situations (especially variables that are declared inside the file you're working in) you won't have to worry about types. Sometimes though, the type of a value is unknown and must be specified manually in order to use it with operations. This can be done by adding <code>: &lt;type&gt;</code> after the value.</p> <p>In the below case, <code>spawnLocation</code>'s type is unknown. For the compiler to know what to do when adding the vector to it, you have to manually specify that it's a location. <pre><code>default:Teleport(global spawnLocation: loc + vec[1,10,1]);\n</code></pre></p> <p>Specifying the type of a variable every time you use it would suck, so you can also assign a type to variables outside of expressions <pre><code>global spawnLocation: loc;\n\n# compiler now knows for both of these lines that `spawnLocation` is a location\ndefault:Teleport(global spawnLocation + vec[0,10,0]);\nwait(1){\"Time Unit\" = \"Seconds\"};\ndefault:Teleport(global spawnLocation + vec[0,20,0]);\n</code></pre></p> <p>Type overrides can also be applied to indexing operations and actions/functions that return multiple types.</p> <pre><code>default:Teleport(global spawnLocationDict[\"main\"]: loc + vec[0,10,0]);\n\nline newTag = item:GetTag(global item,\"cooltagname\"): num + 10;\n</code></pre>"},{"location":"language_features/expressions/#indexing-operation","title":"Indexing Operation","text":"<p>Values in lists and dicts can be accessed via square bracket syntax from within expressions.</p> <pre><code>line dict = {\n    \"very awesome key\" = \"even more awesome value\"\n};\ndefault:SendMessage(line dict[\"very awesome key\"]);\n\nline list = [1,2,\"buckle my shoe\"];\ndefault:SendMessage(line list[3]);\n</code></pre> <p>Warning</p> <p>Even though you can easily do the same index operation in multiple places, it's not recommended. Every index operation creates more codeblocks, which uses more CPU. For this reason, if you know a value is not going to change, it's best to only index once and store the result in a variable.</p> Bad<pre><code>global locations = {\n    \"spawn\" = loc[10,50,10]\n};\n\ndefault:SendMessage(\"Teleporting to location\", global locations[\"spawn\"]);\ndefault:Teleport(global locations[\"spawn\"]);\n</code></pre> Good<pre><code>global locations = {\n    \"spawn\" = loc[10,50,10]\n};\n\nline selectedLocation = global locations[\"spawn\"];\n\ndefault:SendMessage(\"Teleporting to location\", line selectedLocation);\ndefault:Teleport(line selectedLocation);\n</code></pre> <p>It's true that the above example is a bit unnecessary, but in loops or when using indexing operations that treverse multiple levels the saved CPU can really add up.</p> <p>Indexes can themselves be expressions <pre><code>line scores = [23,925,78,873];\ndefault:SendMessage(line teamScores[num:Random(1,4)]);\n\nline teams = {\n    \"red\" = {\n        \"points\" = 12\n    },\n    \"blue\" = {\n        \"points\" = 15\n    }\n};\nline teamData = line teams[var:SetToRandom(\"red\",\"blue\")];\n</code></pre></p> <p>If the type of a value is unknown, it must be manually specified in order to index into it. The indexing operation can appear directly after the type override; no extra parentheses are needed. <pre><code>default:SendMessage(global dict_declared_elsewhere: dict[\"cool_key\"]);\ndefault:SendMessage(global list_declared_elsewhere: list[5]);\n</code></pre></p> <p>Multiple levels can be traversed, however you will have to manually specify the type of each level. <pre><code>line gameState = {\n    \"redTeam\" = {\n        \"unlocks\" = [\"damageBoost\",\"healthBoost\"]\n    }\n};\n\nline firstUnlock = line gameState[\"redTeam\"]:dict[\"unlocks\"]:list[1];\n</code></pre></p> <p>You can set dictionary values by indexing into them and using an assignment operator.</p> <pre><code>global dict = {};\nglobal dict[\"key\"] = 100;\n\ndefault:SendMessage(global dict[\"key\"]); #sends \"100\"\n</code></pre> <p>Assigning values to keys multiple levels deep will change the value in the original dictionary. <pre><code>global dict = {\n    \"words\" = [\"random value\"]\n};\nglobal dict[\"words\"]:list[0] = \"jeremaster\";\n\ndefault:SendMessage(global dict[\"words\"][0]); #sends \"jeremaster\"\n</code></pre></p>"},{"location":"language_features/expressions/#order-of-operations","title":"Order of Operations","text":"<p>Unlike a certain expression system used by DiamondFire that shall not be named, Terracotta expressions follow a sane order of operations.</p> <p>Things closer to the top of this list are evaluated before things closer to the bottom. Things on the same line of this list are evaluated from left to right.</p> <ul> <li>Nested expressions (parentheses), indexing into dicts/lists, and function calls (actions, constructors)</li> <li>Exponentiation (<code>^</code>)</li> <li>Multiplication, division, and modulo (<code>*</code>, <code>/</code>, <code>^</code>)</li> <li>Addition and subtraction (<code>+</code>, <code>-</code>)</li> <li>Comparisons (<code>==</code>, <code>!=</code>, <code>&lt;</code>, <code>&gt;</code>, <code>&lt;=</code>, <code>&gt;=</code>)</li> </ul>"}]}